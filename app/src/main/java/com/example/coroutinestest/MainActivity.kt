package com.example.coroutinestest

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import com.example.coroutinestest.databinding.ActivityMainBinding
import kotlinx.coroutines.*

class MainActivity : AppCompatActivity() {
    private lateinit var binding: ActivityMainBinding

    //Dispatchers.Default: –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ç–∏–ø –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω —è–≤–Ω—ã–º –æ–±—Ä–∞–∑–æ–º. –≠—Ç–æ—Ç —Ç–∏–ø –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—â–∏–π –ø—É–ª —Ä–∞–∑–¥–µ–ª—è–µ–º—ã—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –∏ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞ (–æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ —Å —Ñ–∞–π–ª–∞–º–∏, –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö, —Å–µ—Ç—å—é) –∏ –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞.
    //
    //Dispatchers.IO: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—â–∏–π –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤, —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏ –∏–ª–∏ —Å–µ—Ç–µ–≤—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏).
    //
    //Dispatchers.Main: –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö Android –∏–ª–∏ JavaFX.
    //
    //Dispatchers.Unconfined: –∫–æ—Ä—É—Ç–∏–Ω–∞ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ —á–µ—Ç–∫–æ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º –∏–ª–∏ –ø—É–ª–æ–º –ø–æ—Ç–æ–∫–æ–≤. –û–Ω–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º –ø–æ—Ç–æ–∫–µ –¥–æ –ø–µ—Ä–≤–æ–π –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ü–æ—Å–ª–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∫–æ—Ä—É—Ç–∏–Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É –≤ –æ–¥–Ω–æ–º –∏–∑ –ø–æ—Ç–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–æ—Ä–æ–≥–æ –Ω–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —è–∑—ã–∫–∞ Kotlin –≤ –æ–±—ã—á–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–∏–ø.
    //
    //newSingleThreadContext –∏ newFixedThreadPoolContext: –ø–æ–∑–≤–æ–ª—è—é—Ç –≤—Ä—É—á–Ω—É—é –∑–∞–¥–∞—Ç—å –ø–æ—Ç–æ–∫/–ø—É–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—Ä—É—Ç–∏–Ω—ã
    private val scope = CoroutineScope(Job() + Dispatchers.Main)

    //The CoroutineExceptionHandler is an optional element of a CoroutineContext allowing you to handle uncaught exceptions
    //Exceptions will be caught if these requirements are met:
    //When ‚è∞: The exception is thrown by a coroutine that automatically throws exceptions (works with launch, not with async).
    //Where üåç: If it‚Äôs in the CoroutineContext of a CoroutineScope or a root coroutine (direct child of CoroutineScope or a supervisorScope).
    private val handler = CoroutineExceptionHandler { _, exception ->
        println("Caught $exception")
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)


        binding.apply {
            btnSimpleCoroutine.setOnClickListener {
                //launch(), –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –Ω–∞–º –Ω–µ –Ω–∞–¥–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫–æ—Ä—É—Ç–∏–Ω—ã –∏ –∫–æ–≥–¥–∞ –Ω–∞–º –µ–µ –Ω–∞–¥–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å –¥—Ä—É–≥–∏–º –∫–æ–¥–æ–º
                scope.launch {
                    main()
                }
            }
            btnSimpleCoroutineScope.setOnClickListener {
                scope.launch {
                    main2()
                }
            }
            btnRunBlocking.setOnClickListener {
                scope.launch {
                    main3()
                }
            }
            btnWithoutJoin.setOnClickListener {
                scope.launch {
                    mainWithoutJoin()
                }
            }
            btnWithJoin.setOnClickListener {
                scope.launch {
                    mainWithJoin()
                }
            }
            btnWithoutStart.setOnClickListener {
                scope.launch {
                    mainWithoutStart()
                }
            }
            btnWithStart.setOnClickListener {
                scope.launch {
                    mainWithStart()
                }
            }
            btnAsync.setOnClickListener {
                scope.launch {
                    mainWithAsync()
                }
            }
            btnWithAwait.setOnClickListener {
                scope.launch {
                    mainWithAwait()
                }
            }
            btnParallelLaunch.setOnClickListener {
                scope.launch {
                    mainParallelLaunch()
                }
            }
            btnDelayedStartWithAwait.setOnClickListener {
                scope.launch {
                    mainDelayedStartWithAwait()
                }
            }
            btnWithCancel.setOnClickListener {
                scope.launch {
                    mainWithCancel()
//                    mainCancelAndJoin()
                }
            }
            btnCancellationException.setOnClickListener {
                scope.launch {
                    mainCancellationException()
                }
            }
            btnCancellationExceptionAsync.setOnClickListener {
                scope.launch {
                    mainCancellationExceptionAsync()
                }
            }
            btnCoroutineExceptionHandler.setOnClickListener {

                //will be caught by the handler
                scope.launch(handler) {
                    launch {
                        throw Exception("Failed coroutine")
                    }
                }
                //won‚Äôt be caught
                //The exception isn‚Äôt caught because the handler is not installed in the right CoroutineContext.
                //The inner launch will propagate the exception up to the parent as soon as it happens, since the parent doesn‚Äôt know anything about the handler, the exception will be thrown.
//                scope.launch {
//                    launch(handler) {
//                        throw Exception("Failed coroutine")
//                    }
//                }
            }
            btnWithTimeOut.setOnClickListener {
                scope.launch(Dispatchers.Default) {
                    println("Starting the long calculation...")

                    //using withTimeOut function
                    //which runs the coroutine for 3sec
                    //the coroutine will automatically be canceled and don‚Äôt do any further calculations when a certain time has elapsed and withTimeOut()
                    withTimeout(3000L) {
                        for (i in 30..50) {
                            if (isActive) println("Result for i = $i : ${fib(i)}")
                        }
                    }
                    println("Ending the long calculation...")
                }
            }

            btnYield.setOnClickListener {
                scope.launch(Dispatchers.Default) {
                    yieldFun()
                }
            }

            btnSupervisorJob.setOnClickListener {
                scope.launch(Dispatchers.Default) {
                    supervisorJob()
                }
            }
        }
    }

    //SupervisorJob ‚Äî —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏–ø —Ä–∞–±–æ—Ç—ã (Job) –≤ Kotlin Coroutines, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –æ—à–∏–±–æ–∫ –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–æ—Ä—É—Ç–∏–Ω–∞—Ö –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–æ—Ä—É—Ç–∏–Ω—ã.
    //–û–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—Ä—É—Ç–∏–Ω, —á—Ç–æ–±—ã –æ—à–∏–±–∫–∞ –≤ –æ–¥–Ω–æ–π –¥–æ—á–µ—Ä–Ω–µ–π –∫–æ—Ä—É—Ç–∏–Ω–µ –Ω–µ –ø—Ä–∏–≤–æ–¥–∏–ª–∞ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–º–µ–Ω–µ –¥—Ä—É–≥–∏—Ö –∫–æ—Ä—É—Ç–∏–Ω.
    //–í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã –¥–æ–±–∞–≤–ª—è–µ–º SupervisorJob –≤ CoroutineScope. –¢–µ–ø–µ—Ä—å –∫–∞–∂–¥–∞—è –¥–æ—á–µ—Ä–Ω—è—è –∫–æ—Ä—É—Ç–∏–Ω–∞, –∑–∞–ø—É—â–µ–Ω–Ω–∞—è –≤ —ç—Ç–æ–º —Å–∫–æ—É–ø–µ, –±—É–¥–µ—Ç –∏–º–µ—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã.
    //–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –≤ –¥–æ—á–µ—Ä–Ω–µ–π –∫–æ—Ä—É—Ç–∏–Ω–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ—Ä—É—Ç–∏–Ω—ã –±—É–¥—É—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.
    private fun supervisorJob() {
        val exceptionHandler= CoroutineExceptionHandler { _, throwable ->
            println("Handle exception: ${throwable.message}")
        }
        val supervisorJob = SupervisorJob()
        val scope = CoroutineScope(Dispatchers.IO + supervisorJob + exceptionHandler)

        scope.launch {
            launch {
                delay(3_000)
                throw (IllegalStateException("Child coroutine failed"))
            }
            while (true) {
                delay(1_000)
                println("tick 1")
            }
        }

        scope.launch {
            while (true) {
                delay(1_000)
                println("tick 2")
            }
        }
    }

    //yield ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É –∫–æ—Ä—É—Ç–∏–Ω—ã –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ—Ä—É—Ç–∏–Ω—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–µ–º —Å–∞–º—ã–º –ø–æ–∑–≤–æ–ª—è—è –¥—Ä—É–≥–∏–º –∫–æ—Ä—É—Ç–∏–Ω–∞–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫.
    //–≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–æ –≤ —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö, –≥–¥–µ –∫–æ—Ä—É—Ç–∏–Ω–∞ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏, –≤—ã–∑–æ–≤ yield –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø–æ—Ç–æ–∫ –Ω–µ –±—É–¥–µ—Ç –º–æ–Ω–æ–ø–æ–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ–ª–µ–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏.
    //yield –≤ –ø–µ—Ä–≤–æ–π –∫–æ—Ä—É—Ç–∏–Ω–µ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Ç–æ–º—É, —á—Ç–æ –ø–µ—Ä–≤–∞—è –∫–æ—Ä—É—Ç–∏–Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç—É–ø–∞–µ—Ç –º–µ—Å—Ç–æ –≤—Ç–æ—Ä–æ–π.
    private fun yieldFun() = runBlocking {
        launch {
            for (i in 1..5) {
                println("Computation $i in Coroutine 1")
                yield()
            }
        }
        launch {
            for (i in 1..5) {
                println("Task $i in Coroutine 2")
            }
        }
    }

    private fun fib(n: Int): Long {
        return when (n) {
            0 -> 0
            1 -> 1
            else -> fib(n - 1) + fib(n - 2)
        }
    }

    //A job is returned
/*
    val job = GlobalScope.launch(Dispatchers.Default) {
        println("Some Coroutines")
        delay(400L)
    }
*/

    private suspend fun main() {
        for (i in 0..5) {
            delay(400L)
            println(i)
        }

        println("Hello Coroutines")
    }

    //coroutineScope –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–∑—ã–≤–∞—é—â–∏–π –ø–æ—Ç–æ–∫, –∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –æ—Å–≤–æ–±–æ–∂–¥–∞—è –ø–æ—Ç–æ–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥—Ä—É–≥–∏–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
    private suspend fun main2() = coroutineScope {
        launch {
            for (i in 0..5) {
                delay(400L)
                println(i)
            }
            println("Goodbye Coroutines")
        }

        println("Hello Coroutines")
    }

    //runBlocking –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–∑—ã–≤–∞—é—â–∏–π –ø–æ—Ç–æ–∫, –ø–æ–∫–∞ –≤—Å–µ –∫–æ—Ä—É—Ç–∏–Ω—ã –≤–Ω—É—Ç—Ä–∏ –≤—ã–∑–æ–≤–∞ runBlocking { ... } –Ω–µ –∑–∞–≤–µ—Ä—à–∞—Ç —Å–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    private fun main3() = runBlocking {
        launch {
            for (i in 0..5) {
                delay(400L)
                println(i)
            }
            println("Goodbye Coroutines")
        }

        println("Hello Coroutines")
    }

    private suspend fun main4() = coroutineScope {
        launch {
            println("Outer coroutine")
            launch {
                println("Inner coroutine")
                delay(400L)
            }
        }

        println("End of Main")
    }

    private suspend fun mainWithoutJoin() = coroutineScope {
        launch {
            for (i in 1..5) {
                println(i)
                delay(400L)
            }
        }

        println("Start")
        println("End")
    }

    //join() –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–∂–∏–¥–∞—Ç—å, –ø–æ–∫–∞ –∫–æ—Ä—É—Ç–∏–Ω–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
    private suspend fun mainWithJoin() = coroutineScope {
        val job = launch {
            for (i in 1..5) {
                println(i)
                delay(400L)
            }
        }

        println("Start")
        //–æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ—Ä—É—Ç–∏–Ω—ã
        job.join()
        println("End")
    }

    private suspend fun mainWithoutStart() = coroutineScope {
        //–∫–æ—Ä—É—Ç–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞
        launch() {
            delay(200L)
            println("Coroutine has started")
        }

        delay(1000L)
        println("Other actions in main method")
    }

    //–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –∫–æ—Ä—É—Ç–∏–Ω launch —Å–æ–∑–¥–∞–µ—Ç –∏ —Å—Ä–∞–∑—É –∂–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ—Ä—É—Ç–∏–Ω—É. –û–¥–Ω–∞–∫–æ Kotlin —Ç–∞–∫–∂–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ç–µ—Ö–Ω–∏–∫—É –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∫–æ—Ä—É—Ç–∏–Ω—ã (lazy-–∑–∞–ø—É—Å–∫), –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –∫–æ—Ä—É—Ç–∏–Ω–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–µ—Ç–æ–¥–∞ start() –æ–±—ä–µ–∫—Ç–∞ Job.
    //–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é launch() –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ start = CoroutineStart.LAZY
    private suspend fun mainWithStart() = coroutineScope {
        //–∫–æ—Ä—É—Ç–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
        val job = launch(start = CoroutineStart.LAZY) {
            delay(200L)
            println("Coroutine has started")
        }

        delay(1000L)
        //–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É
        job.start()
        println("Other actions in main method")
    }

    //async –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ—Ä—É—Ç–∏–Ω—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –∫–æ—Ä—É—Ç–∏–Ω–∞–º–∏
    //async –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Deferred, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ—Ä—É—Ç–∏–Ω—ã.
    //–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Deferred —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω –æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Job, –ø–æ—ç—Ç–æ–º—É –¥–ª—è –Ω–µ–≥–æ —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–ª—è –∏–Ω—Ç–µ—Ñ–µ–π—Å–∞ Job
    private suspend fun mainWithAsync() = coroutineScope {
        async { printHello() }
        println("Program has finished")
    }

    private suspend fun printHello() {
        delay(500L)
        println("Hello work!")
    }

    //–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ Deferred –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è await()
    private suspend fun mainWithAwait() = coroutineScope {
        val message: Deferred<String> = async { getMessage() }
        println("message: ${message.await()}")
        println("Program has finished")
    }

    private suspend fun getMessage(): String {
        delay(500L)
        return "Hello"
    }

    private suspend fun mainParallelLaunch() = coroutineScope {
        val numDeferred1 = async { sum(1, 2) }
        val numDeferred2 = async { sum(3, 4) }
        val numDeferred3 = async { sum(5, 6) }
        val num1 = numDeferred1.await()
        val num2 = numDeferred2.await()
        val num3 = numDeferred3.await()

        println("number1: $num1  number2: $num2  number3: $num3")
    }

    private suspend fun sum(a: Int, b: Int): Int {
        delay(500L)
        return a + b
    }

    private suspend fun mainDelayedStartWithAwait() = coroutineScope {
        val sum = async(start = CoroutineStart.LAZY) { sumDelayedStartWithAwait(1, 2) }
        delay(1000L)
        println("Actions after the coroutine creation")
        println("sum: ${sum.await()}")
    }

    private fun sumDelayedStartWithAwait(a: Int, b: Int): Int {
        println("Coroutine has started")
        return a + b
    }

    private suspend fun mainWithCancel() = coroutineScope {
        val downloader: Job = launch {
            println("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤")
            for (i in 1..5) {
                println("–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª $i")
                delay(500L)
            }
        }
        delay(800L)
        println("–ù–∞–¥–æ–µ–ª–æ –∂–¥–∞—Ç—å, –ø–æ–∫–∞ –≤—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∑—è—Ç—Å—è. –ü—Ä–µ—Ä–≤—É-–∫–∞ —è –∑–∞–≥—Ä—É–∑–∫—É...")
        //–æ—Ç–º–µ–Ω—è–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É
        downloader.cancel()
        //–æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ—Ä—É—Ç–∏–Ω—ã
        downloader.join()
        println("–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    }

    private suspend fun mainCancelAndJoin() = coroutineScope {
        val downloader: Job = launch {
            println("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤")
            for (i in 1..5) {
                println("–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª $i")
                delay(500L)
            }
        }
        delay(800L)
        println("–ù–∞–¥–æ–µ–ª–æ –∂–¥–∞—Ç—å, –ø–æ–∫–∞ –≤—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∑—è—Ç—Å—è. –ü—Ä–µ—Ä–≤—É-–∫–∞ —è –∑–∞–≥—Ä—É–∑–∫—É...")
        //–æ—Ç–º–µ–Ω—è–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É –∏ –æ–∂–∏–¥–∞–µ–º –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        downloader.cancelAndJoin()
        println("–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    }

    private suspend fun mainCancellationException() = coroutineScope {
        val downloader: Job = launch {
            try {
                println("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤")
                for (i in 1..5) {
                    println("–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª $i")
                    delay(500L)
                }
            } catch (e: CancellationException) {
                println("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
            } finally {
                println("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            }
        }
        delay(800L)
        println("–ù–∞–¥–æ–µ–ª–æ –∂–¥–∞—Ç—å. –ü—Ä–µ—Ä–≤—É-–∫–∞ —è –∑–∞–≥—Ä—É–∑–∫—É...")
        downloader.cancelAndJoin()
        println("–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    }

    private suspend fun mainCancellationExceptionAsync() = coroutineScope {
        //—Å–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É
        val message = async {
            getMessage()
        }
        //–æ—Ç–º–µ–Ω–∞ –∫–æ—Ä—É—Ç–∏–Ω—ã
        message.cancelAndJoin()

        try {
            //–æ–∂–∏–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            println("message: ${message.await()}")
        } catch (e: CancellationException) {
            println("Coroutine has been canceled")
        }
        println("Program has finished")
    }

}